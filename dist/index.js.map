{
  "version": 3,
  "sources": ["../indexeddb/utils.js", "../indexeddb/crud.js", "../indexeddb/index.js", "../utils.js", "../reactive-record/relationship.js", "../reactive-record/crud.js", "../reactive-record/index.js", "../appstate/events.js", "../appstate/utils.js", "../appstate/index.js", "../constants.js", "../index.js", "../index.sw.js"],
  "sourcesContent": ["export const promisifyRequest = (request) => {\n  return new Promise((resolve, reject) => {\n    request.oncomplete = request.onsuccess = () => resolve(request.result);\n    request.onabort = request.onerror = () => reject(request.error);\n  });\n};\n\nconst executeRequest = (request) =>\n  new Promise((resolve, reject) => {\n    request.oncomplete = request.onsuccess = () => resolve(request.result);\n    request.onabort = request.onerror = () => reject(request.error);\n  });\n\nexport const tableOperation = (table, mode, operation) =>\n  table(mode, (store) => executeRequest(operation(store)));\nconst iterateCursor = (request, process) =>\n  new Promise((resolve, reject) => {\n    const items = [];\n    request.onsuccess = () => {\n      const cursor = request.result;\n      if (cursor) {\n        process(items, cursor);\n        cursor.continue();\n      } else {\n        resolve(items);\n      }\n    };\n    request.onerror = () => reject(request.error);\n  });\n\nconst processKeys = (items, cursor) => items.push(cursor.key);\nconst processValues = (items, cursor) => items.push(cursor.value);\nconst processEntries = (items, cursor) =>\n  items.push([cursor.key, cursor.value]);\n\nexport const entries = (table) =>\n  tableOperation(table, \"readonly\", (store) =>\n    store.getAll && store.getAllKeys\n      ? Promise.all([\n        executeRequest(store.getAllKeys()),\n        executeRequest(store.getAll()),\n      ]).then(([keys, values]) => keys.map((key, i) => [key, values[i]]))\n      : iterateCursor(store.openCursor(), processEntries),\n  );\n\nexport const startsWith = (\n  prefix,\n  table,\n  config = { index: true, keepKey: false },\n) =>\n  table(\"readonly\", (store) => {\n    const range = IDBKeyRange.bound(prefix, prefix + \"\\uffff\");\n    return iterateCursor(store.openCursor(range), (items, cursor) => {\n      const id = config.keepKey ? cursor.key : cursor.key.split(\"_\")[1];\n      items.push(config.index ? id : { id, [prefix]: cursor.value });\n    });\n  });\n\nexport const getCount = (table) =>\n  tableOperation(table, \"readonly\", (store) => store.count());\n\nexport const isEmpty = (table) => getCount(table).then((count) => count === 0);\n\nexport const clear = (table) =>\n  tableOperation(table, \"readwrite\", (store) => store.clear());\n\nexport const keys = (table) =>\n  tableOperation(table, \"readonly\", (store) =>\n    store.getAllKeys\n      ? store.getAllKeys()\n      : iterateCursor(store.openCursor(), processKeys),\n  );\n\nexport const values = (table) =>\n  tableOperation(table, \"readonly\", (store) =>\n    store.getAll\n      ? store.getAll()\n      : iterateCursor(store.openCursor(), processValues),\n  );\n", "import { promisifyRequest, startsWith } from \"./utils\";\n\nexport const getItem = (key, table) => {\n  return table(\"readonly\", (store) => promisifyRequest(store.get(key)));\n};\n\nexport const get = (keys, table) => {\n  return table(\"readonly\", (store) =>\n    Promise.all(keys.map((key) => promisifyRequest(store.get(key)))),\n  );\n};\n\nexport const set = (entries, table) => {\n  return table(\"readwrite\", (store) => {\n    entries.forEach((entry) => store.put(entry[1], entry[0]));\n    return promisifyRequest(store.transaction);\n  });\n};\n\nexport const remove = (keys, table) => {\n  return table(\"readwrite\", (store) => {\n    keys.forEach((key) => store.delete(key));\n    return promisifyRequest(store.transaction);\n  });\n};\n\nexport const update = (key, updater, db) => {\n  return db(\n    \"readwrite\",\n    (store) =>\n      new Promise((resolve, reject) => {\n        store.get(key).onsuccess = function () {\n          try {\n            store.put(updater(this.result), key);\n            resolve(promisifyRequest(store.transaction));\n          } catch (err) {\n            reject(err);\n          }\n        };\n      }),\n  );\n};\n\nexport const setLastOp = async (key, value, config) => {\n  const { db, propKey } = config;\n  const keys = await startsWith(propKey, db, { index: true, keepKey: true });\n  await remove(keys, db);\n  set([key, value], db);\n};\n", "import { get, getItem, remove, set, setLastOp, update } from \"./crud.js\";\nimport {\n  clear,\n  entries,\n  getCount,\n  isEmpty,\n  keys,\n  promisifyRequest,\n  startsWith,\n  values,\n} from \"./utils.js\";\n\nexport const createStore = (dbName = \"bootstrapp\", storeName = \"kv\") => {\n  const request = indexedDB.open(dbName);\n  request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n  const dbp = promisifyRequest(request);\n  return (txMode, callback) =>\n    dbp.then((db) =>\n      callback(db.transaction(storeName, txMode).objectStore(storeName)),\n    );\n};\n\nexport const createDatabase = (\n  dbName = \"bootstrapp\",\n  storeNames = [\"kv\"],\n  version = 1,\n) => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(dbName, version);\n    request.onupgradeneeded = (event) => {\n      const db = event.target.result;\n      storeNames.forEach((storeName) => {\n        if (!db.objectStoreNames.contains(storeName)) {\n          db.createObjectStore(storeName);\n        }\n      });\n    };\n\n    request.onerror = (event) => {\n      console.log(event.target);\n      reject(new Error(`IndexedDB error: ${event.target.error}`));\n    };\n\n    request.onsuccess = (event) => {\n      const db = event.target.result;\n      const stores = {};\n\n      storeNames.forEach((storeName) => {\n        stores[storeName] = (txMode, callback) => {\n          return new Promise((resolve, reject) => {\n            try {\n              const transaction = db.transaction(storeName, txMode);\n              const objectStore = transaction.objectStore(storeName);\n              Promise.resolve(callback(objectStore))\n                .then(resolve)\n                .catch(reject);\n            } catch (error) {\n              console.error({ storeName, error });\n              reject(new Error(\"Transaction failed\", error));\n            }\n          });\n        };\n      });\n\n      resolve(stores);\n    };\n  });\n};\n\nconst idbAdapter = {\n  clear,\n  entries,\n  values,\n  getCount,\n  startsWith,\n  keys,\n  isEmpty,\n  createStore,\n  createDatabase,\n  get,\n  getItem,\n  remove,\n  set,\n  setLastOp,\n  update,\n};\n\nexport default idbAdapter;\n", "const BASE62 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\nexport let sequentialCounter = 0;\n\nexport const getTimestamp = (id, appId) => {\n  return Number.parseInt(fromBase62(appId)) + Number.parseInt(fromBase62(id));\n};\n\nconst generateIdByTimestamp = (timestamp, padding) => {\n  if (!timestamp) {\n    throw new Error(\n      \"Reference timestamp not set. Ensure getAppId has been called first.\",\n    );\n  }\n\n  const timeDifference = Date.now() - parseInt(timestamp, 10);\n  let id = toBase62(timeDifference + sequentialCounter);\n  sequentialCounter++;\n  if (padding) {\n    while (id.length < 6) {\n      id = \"0\" + id;\n    }\n  }\n  return id;\n};\n\nexport const generateId = (appId, userId) => {\n  const referenceTimestamp = fromBase62(appId);\n  let id = generateIdByTimestamp(referenceTimestamp, !!userId);\n  return userId ? `${id}-${userId}` : id;\n};\n\nexport const fromBase62 = (str = \"\") => {\n  let num = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    const index = BASE62.indexOf(char);\n    num = num * 62 + index;\n  }\n  return num;\n};\n\nexport const toBase62 = (num) => {\n  if (num === 0) return BASE62[0];\n  let arr = [];\n  while (num) {\n    arr.unshift(BASE62[num % 62]);\n    num = Math.floor(num / 62);\n  }\n  return arr.join(\"\");\n};\n\nexport const extractPathParams = (endpoint, requestPath, regex) => {\n  const paramNames = [...endpoint.matchAll(/:([a-z]+)/gi)].map(\n    (match) => match[1],\n  );\n  const paramValues = requestPath.match(regex).slice(1);\n  return paramNames.reduce(\n    (acc, name, index) => ({\n      ...acc,\n      [name]: paramValues[index],\n    }),\n    {},\n  );\n};\n", "export const UpdateRelationship = {\n  one: async function (params) {\n    await updateOneRelationship(params);\n  },\n  many: async function (params) {\n    await updateManyRelationship(params);\n  },\n};\n\nasync function updateOneRelationship({\n  prevValue,\n  value,\n  relatedModel,\n  id,\n  targetForeignKey,\n}) {\n  const targetType = relatedModel.properties[targetForeignKey]?.type;\n  const isMany = targetType === \"many\";\n  const [, prevId] = extractId(prevValue);\n  const [position, newId] = (value && extractId(value)) || [];\n\n  if (prevId) {\n    await unsetRelation(relatedModel, id, prevId, targetForeignKey, isMany);\n  }\n\n  if (newId) {\n    await setRelation(\n      relatedModel,\n      id,\n      newId,\n      targetForeignKey,\n      isMany,\n      position,\n    );\n  }\n}\n\nexport async function updateManyRelationship({\n  prevId,\n  value,\n  relatedModel,\n  id,\n  targetForeignKey,\n}) {\n  const prevIds = ensureArray(prevId);\n  const newIds = ensureArray(value);\n\n  const addedIds = newIds.filter((v) => !prevIds.includes(v));\n  const removedIds = prevIds.filter((v) => !newIds.includes(v));\n\n  for (const relatedId of addedIds) {\n    await setRelation(relatedModel, id, relatedId, targetForeignKey);\n  }\n\n  for (const relatedId of removedIds) {\n    await unsetRelation(relatedModel, id, relatedId, targetForeignKey);\n  }\n}\n\nexport function ensureArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n\nexport function extractId(val) {\n  return Array.isArray(val) ? val : [null, val];\n}\n\nexport async function unsetRelation(\n  relatedModel,\n  id,\n  prevId,\n  targetForeignKey,\n  isMany = false,\n) {\n  if (!prevId) return;\n  let keyToUpdate = `${targetForeignKey}_${prevId}`;\n  if (isMany) {\n    const prevTarget = await relatedModel.get(prevId, [targetForeignKey]);\n    const oldIndex = prevTarget[targetForeignKey] || [];\n    if (prevTarget) {\n      await relatedModel._setProperty(\n        keyToUpdate,\n        oldIndex.filter((entry) => entry !== id),\n      );\n    }\n  } else {\n    if (keyToUpdate) await relatedModel._setProperty(keyToUpdate, null);\n  }\n}\n\nexport async function setRelation(\n  relatedModel,\n  id,\n  newId,\n  targetForeignKey,\n  isMany = false,\n  position,\n) {\n  const target = await relatedModel.get(newId, {\n    createIfNotFound: true,\n    props: [targetForeignKey],\n  });\n  let newIndex = target[targetForeignKey] || [];\n\n  if (isMany && Array.isArray(newIndex)) {\n    if (typeof position === \"number\") {\n      newIndex.splice(position, 0, id);\n    } else if (!newIndex.includes(id)) {\n      newIndex.push(id);\n    }\n  } else {\n    newIndex = id;\n  }\n  if (newId && newIndex) {\n    await relatedModel._setProperty(`${targetForeignKey}_${newId}`, newIndex);\n  }\n}\n", "import { generateId, getTimestamp } from \"../utils.js\";\nimport { unsetRelation, UpdateRelationship } from \"./relationship.js\";\nexport class CrudReactiveRecord {\n  _generateEntries({ _userId, id: _id, ...value }) {\n    let newId = _userId ? _id + \"-\" + _userId : _id; // TODO: refactor this, big chances of bug\n    if (!_id) newId = generateId(this.appId, _userId || this.userId);\n    this.lastId = newId;\n    const properties = Object.keys(value);\n    if (!properties[this.referenceKey]) {\n      properties[this.referenceKey] = \"\";\n    }\n\n    return properties.map((prop) => [prop, newId, value[prop]]);\n  }\n\n  async _setProperty(key, value) {\n    return this.adapter.set([[key, value]], this.store);\n  }\n\n  async _unsetMany(keys) {\n    for (const key of keys) {\n      this.logOp(key, \"\");\n    }\n    return this.adapter.remove(keys, this.store);\n  }\n\n  /* \n  async getOps() {\n    //sinceTimestamp = 0\n    // This method fetches all operations after a given timestamp.\n    // Can be optimized further based on how oplog is structured.\n    const allOperations = await this.adapter.get([], this.oplog);\n    return allOperations; // Filtering removed, as the flattened approach doesn't have timestamps. Can be re-added if needed.\n  } */\n\n  async _set(entries) {\n    const entriesToAdd = [];\n\n    for (const [propKey, id, value] of entries) {\n      const key = `${propKey}_${id}`;\n      //this.logOp(key, value);\n      const prop = this.properties[propKey];\n      if (prop?.relationship && [\"one\", \"many\"].includes(prop.type)) {\n        const relatedModel = this.models[prop.relationship];\n        if (!relatedModel)\n          throw \"ERROR: couldn't find model \" + prop.relationship;\n        const { targetForeignKey, type } = prop;\n        const prevValue = await this.get(id, {\n          createIfNotFound: true,\n          props: [propKey],\n        });\n        const relatedProp = relatedModel.properties[targetForeignKey];\n        if (relatedProp?.targetForeignKey && prevValue)\n          await UpdateRelationship[type]({\n            prevValue: prevValue[propKey],\n            id,\n            value,\n            relatedModel,\n            targetForeignKey,\n          });\n      }\n      /* \n      if (this.oplog)\n        this.constructor.postMessage({\n          type: \"OPLOG_WRITE\",\n          store: [this.appId, this.name].join(\"_\"),\n          key,\n          value,\n        }); */\n      entriesToAdd.push([key, value]);\n    }\n\n    return this.adapter.set(entriesToAdd, this.store);\n  }\n\n  async remove(key) {\n    const properties = Object.keys(this.properties);\n    if (!properties) return;\n    for (const propKey of properties) {\n      const prop = this.properties[propKey];\n      if (prop?.relationship) {\n        const prevValue = await this.get(key, [propKey]);\n        const relatedModel = this.models[prop.relationship];\n        if (!relatedModel) {\n          console.error(`ERROR: couldn't find model ${prop.relationship}`);\n          continue;\n        }\n        const { targetForeignKey, type } = prop;\n        const targetIsMany = relatedModel.properties[targetForeignKey] &&\n          relatedModel.properties[targetForeignKey].type === \"many\";\n        if (type === \"one\" && prevValue[propKey]) {\n          await unsetRelation(\n            relatedModel,\n            key,\n            prevValue[propKey],\n            targetForeignKey,\n            targetIsMany,\n          );\n        } else if (type === \"many\" && Array.isArray(prevValue[propKey])) {\n          // TODO: you gotta test this\n          for (const relatedId of prevValue[propKey]) {\n            await unsetRelation(\n              relatedModel,\n              relatedId,\n              key,\n              targetForeignKey,\n              targetIsMany,\n            );\n          }\n        }\n      }\n    }\n\n    // Delete the keys after relationships have been handled\n    const keysToDelete = properties.map((prop) => `${prop}_${key}`);\n    await this._unsetMany(keysToDelete);\n  }\n\n  async removeMany(ids) {\n    if (!ids || !ids.length) return;\n    return Promise.all(ids.map(async (id) => await this.remove(id)));\n  }\n\n  async add(value) {\n    const entries = this._generateEntries(value);\n    await this._set(entries);\n    return await this.get(this.lastId);\n  }\n\n  async addMany(values) {\n    const allEntries = [];\n    for (const value of values) {\n      const entries = this._generateEntries(value);\n      allEntries.push(...entries);\n    }\n    await this._set(allEntries);\n  }\n\n  async edit({ id, ...value }) {\n    const entries = Object.keys(value).map((prop) => [prop, id, value[prop]]);\n    await this._set(entries);\n    return { id, ...value };\n  }\n\n  async editMany(records) {\n    if (!records || !records.length) return;\n    const allEntries = [];\n    for (const record of records) {\n      const { id, ...value } = record;\n      const entries = Object.keys(value).map((prop) => [prop, id, value[prop]]);\n      allEntries.push(...entries);\n    }\n    await this._set(allEntries);\n  }\n\n  async get(id, opts = {}) {\n    if (!id) return;\n    const { props, nested = false, createIfNotFound = false } = opts;\n    const propNames = props || Object.keys(this.properties);\n    const keys = propNames.map((prop) => `${prop}_${id}`);\n    const values = await this.adapter.get(keys, this.store);\n\n    if (\n      (!values || values.every((value) => value == null)) &&\n      !createIfNotFound\n    ) {\n      return null;\n    }\n\n    const obj = { id };\n\n    const promises = propNames.map(async (propKey, idx) => {\n      const prop = this.properties[propKey];\n      if (!prop) return;\n\n      let value = values[idx];\n      if (nested && prop.relationship) {\n        const relatedModel = this.models[prop.relationship];\n        if (!relatedModel) return;\n\n        if (prop.type === \"one\") {\n          const relatedId = values[idx];\n\n          if (relatedId) {\n            value = await relatedModel.get(relatedId);\n          }\n        }\n\n        if (prop.type === \"many\") {\n          const ids = values[idx] || [];\n          if (Array.isArray(ids) && ids.length > 0) {\n            value = await Promise.all(\n              ids.map(async (id) => await relatedModel.get(id)),\n            );\n          }\n        }\n      }\n\n      if (prop.metadata && prop.referenceField) {\n        const [timestamp, userId] = id.split(\"-\");\n        if (prop.metadata === \"user\" && this.models.users) {\n          value = await this.models.users.get(userId);\n        }\n        if (prop.metadata === \"timestamp\") {\n          value = getTimestamp(timestamp, this.appId);\n        }\n      }\n      obj[propKey] = value || prop.defaultValue;\n    });\n\n    await Promise.all(promises);\n    return obj;\n  }\n\n  async getMany(key, opts = {}) {\n    const { startsWith, props, indexOnly = true, nested = false } = opts;\n    console.log(this.referenceKey);\n    const items = await this.adapter.startsWith(\n      startsWith\n        ? [this.referenceKey, startsWith].join(\"_\")\n        : key || this.referenceKey,\n      this.store,\n      { index: indexOnly },\n    );\n    return indexOnly\n      ? Promise.all(\n        items.map(async (key) => await this.get(key, { props, nested })),\n      )\n      : Promise.resolve(items);\n  }\n}\n", "import idbAdapter from \"../indexeddb/index.js\";\nimport { generateId } from \"../utils.js\";\nimport { CrudReactiveRecord } from \"./crud.js\";\n\nlet oplog;\nlet queue;\nclass ReactiveRecord extends CrudReactiveRecord {\n  constructor(\n    { _init, ...properties },\n    { name, appId, userId, logOperations, store, models },\n  ) {\n    super();\n    this.name = name;\n    this.models = models;\n    this.adapter = idbAdapter;\n    this.properties = properties;    \n    this.referenceKey = Object.keys(properties)[0];\n    this.appId = appId;\n    this.userId = userId;\n    this.store = store;\n    if (logOperations) {\n      // TODO: create one store and reuse it globally\n      oplog = this.adapter.createStore(`${this.appId}_oplog`, \"kv\");\n      this.oplog = oplog;\n      queue = this.adapter.createStore(`${this.appId}_queue`, \"kv\");\n      this.queue = queue;\n    }\n\n    if (_init) {\n      _init(this);\n    }\n  }\n  async isEmpty() {\n    return this.adapter.isEmpty(this.store);\n  }\n\n  async logOp(key, value = null) {\n    if (oplog) {\n      const operationId = generateId(this.appId, this.userId);\n      const propKey = `${this.name}_${key}`;\n      await this.adapter.set([[`${propKey}_${operationId}`, value]], oplog);\n      await this.adapter.setLastOp(`${propKey}_${operationId}`, value, {\n        db: queue,\n        propKey,\n      });\n    }\n  }\n}\n\nexport { ReactiveRecord };\n", "import { defineModels, models } from \"../appstate/index.js\";\nimport { getApiModel, initApp } from \"./index.js\";\n\nexport const events = {\n  INIT_BACKEND: async (data, { source }) => {\n    //Controller = source;\n    console.log(\"DEBUG: INIT_BACKEND\");\n    const app = await initApp(data.appId, data.models, data.version);\n    const { appId } = app;\n    source.postMessage({\n      type: \"BACKEND_INITIALIZED\",\n      appId,\n    });\n  },\n  DEFINE_MODELS: async (data, { source }) => {\n    //Controller = source;\n    const { models, appId, userId, suffix, version = 1 } = data;\n    if (models) await defineModels({ models, appId, userId, suffix, version });\n    await getApiModel();\n    source.postMessage({\n      type: \"MODELS_DEFINED\",\n    });\n  },\n  PAGE_BUILDER_UPDATE_PAGE: async (data, { P2P }) => {\n    const { title, url } = data;\n    await getApiModel();\n    console.log({ models });\n    const TabsModel = models.tabs;\n    const tabs = await TabsModel.getMany();\n    const updateTabs = tabs\n      .filter((tab) => tab.title === title)\n      .map((tab) => ({ ...tab, url }));\n    TabsModel.editMany(updateTabs);\n    P2P.execute((client) => {\n      if (client.url.includes(url.split(\"#\")[0])) {\n        client.navigate(url);\n      }\n    });\n  },\n  SYNC_DATA: async (data, { requestUpdate }) => {\n    const { data: syncData } = data;\n    for (let [modelName, entries] of Object.entries(syncData)) {\n      const model = models[modelName];\n      if (model) model?.setMany(entries);\n    }\n\n    requestUpdate();\n  },\n\n  REQUEST_UPDATE: async (data, { requestUpdate }) => {\n    const { store } = data || {};\n    requestUpdate(store);\n  },\n\n  OPLOG_WRITE: async (data, { requestUpdate, P2P }) => {\n    const { bridge, store, modelName, key, value } = data;\n    const { models } = await getApiModel();\n    const model = models[modelName];\n    if (model) {\n      if (value) {\n        await model.setItem(key, value);\n      } else {\n        await model.removeItem(key);\n      }\n\n      // TODO: When sending the message to another user, we need to append the user id who sent it\n      if (!bridge)\n        P2P.postMessage({ type: \"OPLOG_WRITE\", store, modelName, key, value });\n\n      if (data.requestUpdate) requestUpdate();\n    }\n  },\n};\n", "function decodePath(encodedSegment) {\n  return encodedSegment.replace(/%2F/g, \"/\");\n}\n\nexport function getDefaultCRUDEndpoints(modelName, endpoints = {}) {\n  return {\n    [`GET /api/${modelName}`]: function (opts = {}) {\n      return this.getMany(null, opts);\n    },\n    [`GET /api/${modelName}/:id`]: function ({ id, ...opts }) {\n      return this.get(decodePath(id), opts);\n    },\n    [`POST /api/${modelName}`]: function (payload) {\n      return Array.isArray(payload) ? this.addMany(payload) : this.add(payload);\n    },\n    [`DELETE /api/${modelName}/:id`]: function ({ id }) {\n      return this.remove(decodePath(id));\n    },\n    [`PATCH /api/${modelName}/:id`]: function ({ id, ...rest }) {\n      return this.edit({ id: decodePath(id), ...rest });\n    },\n    ...endpoints,\n  };\n}\n\nexport const endpointToRegex = (endpoint) => {\n  const [method, path] = endpoint.split(\" \");\n  const regexPath = path\n    .split(\"/\")\n    .map((part) => (part.startsWith(\":\") ? \"([^/]+)\" : part))\n    .join(\"/\");\n  return new RegExp(`^${method} ${regexPath}/?$`);\n};\n", "import idbAdapter from \"../indexeddb/index.js\";\nimport { ReactiveRecord } from \"../reactive-record/index.js\";\nimport { fromBase62, toBase62 } from \"../utils.js\";\nimport { events } from \"./events.js\";\nimport { endpointToRegex, getDefaultCRUDEndpoints } from \"./utils.js\";\nexport { events };\nexport let appId;\nexport let api;\nconst workspaceModelName = \"workspaces\";\nexport const workspaceModelDefinition = {\n  appId: {\n    type: \"string\",\n    defaultValue: \"\",\n    enum: [],\n    primary: true,\n  },\n  userId: {\n    type: \"string\",\n    defaultValue: \"\",\n    enum: [],\n  },\n  models: {\n    type: \"object\",\n  },\n  controllers: {\n    type: \"object\",\n  },\n  windows: {\n    type: \"many\",\n    relationship: \"windows\",\n    targetForeignKey: \"workspace\",\n  },\n};\n\nexport const defineModel = async (name, module, props) => {\n  const { appId, userId, oplog, models, store } = props;\n  const model = new ReactiveRecord(module, {\n    name,\n    appId,\n    userId,\n    oplog,\n    models,\n    store,\n  });\n  model.definition = module;\n  return model;\n};\n\nexport const defineModels = async (props) => {\n  const { appId, suffix, userId, oplog = false, version = 1 } = props;\n  const modelList = props.models;\n  let dbName = props.dbName || appId;\n  if (suffix) dbName = [dbName, suffix].join(\"_\");\n\n  const stores = await idbAdapter.createDatabase(\n    dbName,\n    Object.keys(modelList),\n    version,\n  );\n\n  const initialData = [];\n\n  for (const [name, module] of Object.entries(modelList)) {\n    const model = await defineModel(name, module, {\n      appId,\n      userId,\n      oplog,\n      models,\n      store: stores[name],\n    });\n    models[name] = model;\n    if (module._initialData) initialData.push([name, module._initialData]);\n  }\n\n  if (initialData.length > 0) {\n    for (const [modelName, data] of initialData) {\n      if (await models[modelName].isEmpty()) {\n        await models[modelName].addMany(data);\n      }\n    }\n  }\n\n  return models;\n};\n\nlet baseModels;\nexport let models = {};\n\n(async () => {\n  const models = await defineModels({\n    models: { [workspaceModelName]: workspaceModelDefinition },\n    dbName: \"_appstate\",\n  });\n  baseModels = models;\n})();\n\nexport const messageHandler =\n  ({ requestUpdate, P2P }) =>\n    async (event) => {\n      const handler = events[event.data.type];\n      if (handler) {\n        console.log(\"DEBUG - frontend event: \", {\n          event,\n        });\n        try {\n          const messageHandlerContext = {\n            source: event.source,\n            requestUpdate,\n            P2P,\n          };\n          await handler(event.data, messageHandlerContext);\n        } catch (error) {\n          console.error(`Error handling ${event.data.type}:`, error);\n        }\n      }\n    };\n\nexport const requestUpdate = () =>\n  self.clients\n    .matchAll()\n    .then((clients) =>\n      clients.forEach((client) => client.postMessage(\"REQUEST_UPDATE\")),\n    );\n\nexport const initApp = async (appId, userModels, version) => {\n  const app = await getApp({\n    models: { [workspaceModelName]: workspaceModelDefinition, ...userModels },\n    WorkspaceModel: baseModels[workspaceModelName],\n  });\n  await defineModels({\n    models: userModels,\n    appId: app.appId,\n    userId: app.userId,\n    version,\n  });\n  await getApiModel();\n  return app;\n};\n\nexport const getApp = async ({ models, WorkspaceModel }) => {\n  const defaultApp = await WorkspaceModel.get(\"default\");\n  if (!defaultApp) {\n    const appId = toBase62(Date.now());\n    await WorkspaceModel.add({ id: \"default\", appId, models });\n    return await WorkspaceModel.add({ id: appId, appId, userId: \"1\" });\n  } else {\n    return await WorkspaceModel.get(defaultApp.appId);\n  }\n};\n\nlet timestamp;\nexport const getBaseTimestamp = async () => {\n  if (timestamp) return timestamp;\n  if (models[workspaceModelName]) {\n    const app = await models[workspaceModelName].get(\"default\");\n    timestamp = fromBase62(app.appId);\n    return timestamp;\n  }\n};\n\nexport async function getApiModel() {\n  if (!api && Object.keys(models).length === Object.keys(baseModels).length) {\n    const defaultApp = await models[workspaceModelName].get(\"default\");\n    delete defaultApp.models[workspaceModelName];    \n    const userModels = await defineModels({\n      models: defaultApp.models,\n      appId: defaultApp.appId,\n    });\n    models = { ...userModels, ...baseModels };    \n  }\n  api = Object.entries(models).reduce((acc, [name, module]) => {\n    const model = module.definition;    \n    const endpoints = getDefaultCRUDEndpoints(name, model.endpoints);\n    Object.entries(endpoints).forEach(([endpoint, callback]) => {\n      const regex = endpointToRegex(endpoint);\n      if (!acc) acc = {};\n      acc[endpoint] = {\n        regex,\n        model: models[name],\n        callback,\n      };\n    });\n    return acc;\n  }, {});  \n  return api;\n}\n", "export const BOOL_TABLE = { false: false, true: true };\n", "import {\n  getApiModel,\n  messageHandler,\n  requestUpdate,\n} from \"./appstate/index.js\";\nimport { BOOL_TABLE } from \"./constants.js\";\nimport idbAdapter from \"./indexeddb/index.js\";\nimport { extractPathParams } from \"./utils.js\";\n\nexport const fetchDataFromDB = async (appId, models) => {\n  const dataPromises = models.map(async (model) => {\n    const db = idbAdapter.createStore(`${appId}_${model}`);\n    const entries = await idbAdapter.entries(db);\n    return { model, entries };\n  });\n\n  const results = await Promise.all(dataPromises);\n  const data = {};\n\n  results.forEach(({ model, entries }) => {\n    data[model] = entries;\n  });\n\n  return data;\n};\n\nexport const postMessage = (payload) => {\n  if (self && self.dispatchEvent) {\n    console.log(\n      \"DEBUG: Send event to service worker queue from reactive-record\",\n      { payload },\n    );\n    const message = new MessageEvent(\"message\", {\n      data: payload,\n    });\n    self.dispatchEvent(message);\n  }\n};\nconst P2P = {\n  _handleClients: (action) => {\n    self.clients.matchAll().then((clients) => {\n      if (clients && clients.length) {\n        clients.forEach((client) => action(client));\n      }\n    });\n  },\n\n  postMessage: (payload) => {\n    P2P._handleClients((client) => client.postMessage(payload));\n  },\n\n  execute: (func) => {\n    P2P._handleClients((client) => func(client));\n  },\n};\n\nconst endpointNotFound = new Response(\n  JSON.stringify({ error: \"ERROR: endpoint not found\" }),\n  {\n    status: 404,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  },\n);\n\nconst endpointsNotLoaded = new Response(\n  JSON.stringify({ error: \"ERROR: endpoints weren't loaded\" }),\n  {\n    status: 500,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  },\n);\n\nconst handleFetch = async ({ event, url }) => {\n  const endpoints = await getApiModel();\n  if (!endpoints) return endpointsNotLoaded;\n\n  const request = `${event.request.method} ${url.pathname}`;\n  const matchedEndpointKey = Object.keys(endpoints).find((endpointKey) => {\n    const { regex } = endpoints[endpointKey];\n    return regex.test(request);\n  });\n  if (!matchedEndpointKey) return endpointNotFound;\n  try {\n    const {\n      callback,\n      model,\n      models = {},\n      regex: endpointRegex,\n    } = endpoints[matchedEndpointKey];\n\n    const pathParams = extractPathParams(\n      matchedEndpointKey,\n      request,\n      endpointRegex,\n    );\n    const queryParams = [...url.searchParams.entries()].reduce(\n      (acc, [key, value]) => ({\n        ...acc,\n        [key]: [\"false\", \"true\"].includes(value) ? BOOL_TABLE[value] : value,\n      }),\n      {},\n    );\n\n    const bodyMethods = [\"POST\", \"PATCH\"];\n    const bodyParams = bodyMethods.includes(event.request.method)\n      ? await event.request\n        .json()\n        .catch((err) => console.error(\"Failed to parse request body\", err))\n      : {};\n    const params = { ...pathParams, ...bodyParams, ...queryParams };\n    const response = await callback.call(\n      model,\n      Array.isArray(bodyParams) ? bodyParams : params,\n      {\n        P2P,\n        requestUpdate,\n        models,\n      },\n    );\n    if ([\"POST\", \"PATCH\", \"DELETE\"].includes(event.request.method)) {\n      requestUpdate();\n    }\n    return new Response(JSON.stringify(response), {\n      headers: {\n        \"Content-Type\": Array.isArray(response)\n          ? \"text/event-stream\"\n          : \"application/json\",\n      },\n    });\n  } catch (error) {\n    console.error({ error });\n    throw error;\n  }\n};\n\nexport {\n  extractPathParams,\n  getApiModel,\n  handleFetch,\n  messageHandler,\n  P2P,\n  requestUpdate,\n};\n", "import { handleFetch, messageHandler, P2P, requestUpdate } from \"./index.js\";\n\nself.messageHandler = messageHandler;\nself.P2P = P2P;\nself.requestUpdate = requestUpdate;\nself.handleFetch = handleFetch;\n"],
  "mappings": "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",
  "names": ["keys", "values", "keys", "entries", "resolve", "reject", "keys", "entries", "values", "id", "startsWith", "key", "models", "models", "P2P", "requestUpdate", "entries", "oplog", "models", "requestUpdate", "P2P", "models"]
}
